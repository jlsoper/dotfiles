#  $HOME/.ash_git


####################################
#
#  git fetch -p
#  git reset --soft HEAD~1 (better)
#  git reset --hard HEAD~1
#
#  alias gconfig_helper='git config --global credential.helper store'
#
#
#  git push <remote> <branch>
#
#  git pull  origin   main
#  git push  origin   main
#
####################################


#####  toggle variable for git diff / difftool
GDIFF_STRING=diff

gdstring() { if [ "$GDIFF_STRING" = "diff" ]; then GDIFF_STRING="difftool" ; else GDIFF_STRING="diff" ; fi ; echo $GDIFF_STRING ; }



alias gadd='git add -A'

alias gbranch='git branch -a'
      gbranch_add() { if [ -n "$1" ]; then git branch    "$1" ; else echo "usage: $FUNCNAME <branch>" ; fi }
      gbranch_del() { if [ -n "$1" ]; then git branch -D "$1" ; else echo "usage: $FUNCNAME <branch>" ; fi }

      gbranch_merge() { if [ -n "$1" ]; then git merge "$1" ; else echo "usage: $FUNCNAME <branch>" ; fi }
alias gbranch_merge_status='git branch --merged'

      gbranch_remote_add() { if [ -n "$1" ]; then git push -u origin          "$1" ; else echo "usage: $FUNCNAME <branch>" ; fi }
      gbranch_remote_del() { if [ -n "$1" ]; then git push    origin --delete "$1" ; else echo "usage: $FUNCNAME <branch>" ; fi }

      gbranch_rename() { if [ -n "$2" ]; then git branch -m "$1" "$2" ; else echo "usage: $FUNCNAME <oldbranch> <newbranch>" ; fi }

      gcheckout() { if [ -n "$1" ]; then git checkout -- "$1" ; else echo "usage: $FUNCNAME <file>" ; fi }
alias gclean='git clean -i'
alias gclean_show='git clean -d -n'
      gclone_branch() { if [ -n "$2" ]; then git clone -b "$1" --single-branch "$2" ; else echo "usage: $FUNCNAME <branch> <remoteRepoURL>" ; fi }
alias gcommit='git commit -m "$(date +%a) $(date +%D) $(date +%R) -- $(hostname) \ $USER"'
alias gconfig='git config --list --show-origin'
alias gdel='git reset --'


alias gdiff='git difftool'

      gdiff_sa() { git "$GDIFF_STRING" --staged "$@" ; }
      gdiff_branch() { if [ -n "$2" ]; then git "$GDIFF_STRING" origin/"$1".."$2" ; else echo -e "\nusage: $FUNCNAME <remote>  <active>\n"  ; fi }
      gdiff_commit() { if [ -n "$2" ]; then git "$GDIFF_STRING"        "$1".."$2" ; else echo -e "\nusage: $FUNCNAME <old-SHA> <new-SHA>\n" ; fi }

      gdiff_fb() { if [ -n "$3" ]; then git difftool origin/"$1".."$2" -- "$3" ; else echo -e "\nusage: $FUNCNAME <remote>  <active>  <file>\n" ; fi }
      gdiff_fc() { if [ -n "$3" ]; then git difftool        "$1".."$2" -- "$3" ; else echo -e "\nusage: $FUNCNAME <old-SHA> <new-SHA> <file>\n" ; fi }

alias gdifftools='git difftool --tool-help'


alias gdir='git ls-files --eol'

#####  export Repo - current branch
      gexport() { if [ -d .git ]; then git archive --format=zip -o /tmp/gitRepo.zip $(git branch --show-current) ; else echo "Invalid directory or location. Run from top level directory of Git Repository!" ; fi }

      ghelp() { if [ -n "$1" ]; then git help "$1" | col -b | expand -t 2 > /tmp/git-"$1".man ; else echo "usage: $FUNCNAME <command>" ; fi }

alias ginit='git init && touch .gitignore README.md'

alias glog='git --no-pager log --reverse --oneline'
alias glogs='git --no-pager log --reverse'

      gpull() { if [ -n "$1" ]; then git pull origin "$1" ; else echo "usage: $FUNCNAME <branch>" ; fi }
      gpush() { if [ -n "$1" ]; then git push origin "$1" ; else echo "usage: $FUNCNAME <branch>" ; fi }

      greset() { if [ -n "$1" ]; then git reset -- "$1" ; else echo "usage: $FUNCNAME <file>" ; fi }

alias grollback='git reset --soft HEAD~1'
alias gstage_deleted='git add $(git ls-files -d)'
alias gstatus='git status -s'



#####  Github
 wget_gha() { if [ -n "$2" ]; then wget "https://github.com/$1/$2/archive/main.zip" ; else echo "usage: $FUNCNAME <userID> <repo>" ; fi }
 wget_ghf() { if [ -n "$4" ]; then wget "https://raw.githubusercontent.com/$1/$2/$3/$4" ; else echo "usage: $FUNCNAME <userID> <repo> <branch> <file>" ; fi }


#####  gitLab
 wget_gla() { if [ -n "$2" ]; then wget "https://gitlab.com/$1/$2/-/archive/main/$2-main.zip" ; else echo "usage: $FUNCNAME <userID> <repo>" ; fi }
 wget_glf() { if [ -n "$4" ]; then wget "https://gitlab.com/$1/$2/-/raw/$3/$4" ; else echo "usage: $FUNCNAME <userID> <repo> <branch> <file>" ; fi }


